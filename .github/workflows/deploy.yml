# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY_HOST: southamerica-west1-docker.pkg.dev
  REGISTRY_REPO: tisw
  DEPLOYMENT_NAME: api-backend-gcp # Add your deployment name here.
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}    # Add your cluster name here.
  GKE_ZONE: us-east4   # Add your cluster zone here.
  #IMAGE_TAG: ${{ github.sha }}
  IMAGE_TAG: ${{ github.ref_name }}
  NAMESPACE: tisw-prod
  API_HOST: tesito.tisw.cl


jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  push_to_registry:
    needs: [build]
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ env.REGISTRY_HOST }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/${{ env.DEPLOYMENT_NAME }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: [push_to_registry]
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - id: 'auth-service-account'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GKE_SA_KEY }}'

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@1bee7de035d65ec5da40a31f8589e240eba8fde5
      with:
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        sed -i "s~{DEPLOYMENT_NAME}~${{ env.DEPLOYMENT_NAME }}~" deploy/k8s/deployment.yaml
        sed -i "s~{DEPLOYMENT_NAME}~${{ env.DEPLOYMENT_NAME }}~" deploy/k8s/service.yaml
        sed -i "s~{DEPLOYMENT_NAME}~${{ env.DEPLOYMENT_NAME }}~" deploy/k8s/configmap.yaml
        sed -i "s~{DEPLOYMENT_NAME}~${{ env.DEPLOYMENT_NAME }}~" deploy/k8s/ingress.yaml
        sed -i "s~{NAMESPACE}~${{ env.NAMESPACE }}~" deploy/k8s/deployment.yaml
        sed -i "s~{NAMESPACE}~${{ env.NAMESPACE }}~" deploy/k8s/service.yaml
        sed -i "s~{NAMESPACE}~${{ env.NAMESPACE }}~" deploy/k8s/configmap.yaml
        sed -i "s~{NAMESPACE}~${{ env.NAMESPACE }}~" deploy/k8s/ingress.yaml
        sed -i "s~{IMAGE_NAME}~${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REGISTRY_REPO }}/${{ env.DEPLOYMENT_NAME }}~" deploy/k8s/deployment.yaml
        sed -i "s~{IMAGE_TAG}~${{ env.IMAGE_TAG }}~" deploy/k8s/deployment.yaml
        sed -i "s~{API_HOST}~${{ env.API_HOST }}~" deploy/k8s/ingress.yaml
        kubectl apply -f ./deploy/k8s/
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n ${{ env.NAMESPACE }}
        kubectl get services -o wide